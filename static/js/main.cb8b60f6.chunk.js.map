{"version":3,"sources":["sign-in-extras/SignInExtras.tsx","sign-in-form/Styled.ts","sign-in-form/SignInForm.tsx","sign-in/Styled.ts","sign-in/index.ts","sign-in/SignIn.tsx","App.tsx","errorBoundary/index.js","errorBoundary/RenderError.js","serviceWorker.ts","index.tsx"],"names":["Link","styled","a","SignUp","ExtraWrapper","div","SignUpParagraph","SignInExtras","href","SignIn","button","Label","label","Input","input","RememberMe","Form","form","SignInForm","formik","useFormik","initialValues","validationSchema","Yup","email","required","password","min","onSubmit","remember","axios","post","then","res","console","log","catch","error","role","aria-label","handleSubmit","htmlFor","id","name","type","onChange","handleChange","onBlur","handleBlur","value","values","placeholder","className","touched","errors","disabled","isValid","dirty","SignInFormWrapper","SignInHeader","h1","Index","App","ErrorBoundary","props","state","hasError","errorInfo","this","children","React","Component","RenderError","Boolean","window","location","hostname","match","ReactDOM","render","e","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cb8b60f6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Link = styled.a`\r\n  color: #000;\r\n  font-weight: 500;\r\n  display: block;\r\n  width: 100%;\r\n`;\r\n\r\nconst SignUp = styled(Link)`\r\n  display: inline;\r\n`;\r\n\r\nconst ExtraWrapper = styled.div`\r\n  display: block;\r\n  text-align: center;\r\n  line-height: 2em;\r\n  padding: 5% 0px 0;\r\n`;\r\n\r\nconst SignUpParagraph = styled.div`\r\n  display: block;\r\n  width: 100%;\r\n`;\r\n\r\nfunction SignInExtras() {\r\n\r\n  return (\r\n    <ExtraWrapper>\r\n      <Link href={\"#\"}>Forget your password?</Link>\r\n      <SignUpParagraph>\r\n        Don't have an account? <SignUp href={\"#\"}>Sign up</SignUp>\r\n      </SignUpParagraph>\r\n      <Link href={\"#\"}>Resend email confirmation</Link>\r\n    </ExtraWrapper>\r\n  );\r\n}\r\n\r\nexport default SignInExtras;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SignIn = styled.button`\r\n  display: block;\r\n  background-color: #06874e;\r\n  color: #fff;\r\n  font-size: 1.5em;\r\n  font-weight: 500;\r\n  padding: 2% 0;\r\n  border: none;\r\n  width: 100%;\r\n\r\n  &:disabled {\r\n    background: #ccc;\r\n  }\r\n  & a {\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: block;\r\n  width: 100%;\r\n  font-weight: 500;\r\n  padding: 1% 0;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  width: 100%;\r\n  padding: 4%;\r\n  display: block;\r\n  border: 1px solid #ccc;\r\n`;\r\n\r\nexport const RememberMe = styled.div`\r\n  display: flex;\r\n  padding: 1% 0 5%;\r\n\r\n  & input {\r\n    width: auto;\r\n    transform: scale(1.5);\r\n    border: 1px solid;\r\n    margin-right: 3%;\r\n  }\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: block;\r\n`;\r\n","import axios from \"axios\";\r\nimport { useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport { Form, Input, Label, RememberMe, SignIn } from \"./Styled\";\r\n\r\ninterface IValues {\r\n  email: string;\r\n  password: string;\r\n  remember: string;\r\n}\r\n\r\nconst SignInForm = () => {\r\n  const formik = useFormik({\r\n    initialValues: {} as IValues,\r\n    validationSchema: Yup.object({\r\n      email: Yup.string().email().required(\"Email is required\"),\r\n      password: Yup.string()\r\n        .min(8, \"Password is too short - should be 8 chars minimum.\")\r\n        .required(\"Password is required\"),\r\n    }),\r\n    onSubmit: ({ email, password, remember }: IValues) => {\r\n      axios\r\n        .post(`localhost:8000/api/login`, {\r\n          email,\r\n          password,\r\n          remember,\r\n        })\r\n        .then((res) => {\r\n          console.log(`${res} successful`);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"API request failed\");\r\n        });\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Form\r\n        role=\"form\"\r\n        aria-label=\"Sign in form\"\r\n        onSubmit={formik.handleSubmit}\r\n      >\r\n        <Label htmlFor=\"email\">Email</Label>\r\n        <Input\r\n          id=\"email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.email}\r\n          placeholder={\"Enter your email\"}\r\n        />\r\n        <div className={\"error\"}>\r\n          {formik.touched.email && formik.errors.email ? (\r\n            <div>{formik.errors.email}</div>\r\n          ) : null}\r\n        </div>\r\n        <br />\r\n        <Label htmlFor=\"password\">Password</Label>\r\n        <Input\r\n          id=\"password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.password}\r\n          placeholder={\"Enter your password\"}\r\n        />\r\n        <div className={\"error\"}>\r\n          {formik.touched.password && formik.errors.password ? (\r\n            <div>{formik.errors.password}</div>\r\n          ) : null}\r\n        </div>\r\n        <br />\r\n        <RememberMe>\r\n          <Input\r\n            id=\"remember\"\r\n            name=\"remember\"\r\n            type=\"checkbox\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.remember}\r\n          />\r\n          <label htmlFor=\"remember\"> Remember me?</label>\r\n        </RememberMe>\r\n\r\n        <SignIn type=\"submit\" disabled={!(formik.isValid && formik.dirty)}>\r\n          Sign in\r\n        </SignIn>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignInForm;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SignInFormWrapper = styled.div`\r\n  text-align: left;\r\n  display: block;\r\n  padding: 0 2% 4%;\r\n  width: 50%;\r\n  min-width: 300px;\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n  border-top: 2px solid #06874e;\r\n  border-radius: 1px;\r\n  background-color: #fff;\r\n`;\r\nexport const SignInHeader = styled.h1`\r\n  text-align: center;\r\n  display: inline-block;\r\n  text-transform: initial;\r\n  width: 100%;\r\n  font-size: 1.5em;\r\n`;\r\n","import Index from './SignIn';\r\n\r\nexport default Index;","import React from \"react\";\r\nimport SignInExtras from \"../sign-in-extras/SignInExtras\";\r\nimport SignInForm from \"../sign-in-form/SignInForm\";\r\nimport { SignInFormWrapper, SignInHeader } from \"./Styled\";\r\n\r\nexport default function SignIn() {\r\n  return (\r\n    <SignInFormWrapper>\r\n      <SignInHeader>Sign in</SignInHeader>\r\n      <SignInForm />\r\n      <SignInExtras />\r\n    </SignInFormWrapper>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport SignIn from \"./sign-in\";\r\n\r\nfunction App() {\r\n  return <SignIn />;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    // console.log({ error, errorInfo });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return <h1>Something went wrong.</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nconst RenderError = ({ error, errorInfo }) => {\r\n  // console.error(\"errorBoundary: \", error);\r\n  return <div>{errorInfo}</div>;\r\n};\r\n\r\nexport default RenderError;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport ErrorBoundary from \"./errorBoundary\";\r\nimport ErrorMessage from \"./errorBoundary/RenderError\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <ErrorBoundary\r\n    render={(e: Error) => (\r\n      <ErrorMessage\r\n        error={e}\r\n        errorInfo={\"something went wrong. Please contact admin\"}\r\n      />\r\n    )}\r\n  >\r\n    <App />\r\n  </ErrorBoundary>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}